# .env.example
# Environment variables for local development/testing of drone-ai-pr-reviewer
# Copy this file to .env and fill in your actual values.
# .env should be in your .gitignore file and NEVER committed.

# --- Core LLM Settings ---
# Required: The full LiteLLM model string (e.g., "openai/gpt-4o", "ollama/mistral")
PLUGIN_LLM_MODEL="openai/gpt-4o"

# Required (usually): API key for the chosen LLM provider.
# Set the actual key here for local testing. In CI, this comes from secrets.
PLUGIN_LLM_API_KEY="sk-your_openai_api_key_here"
# For other providers, set their respective keys if PLUGIN_LLM_API_KEY isn't used by LiteLLM directly:
# ANTHROPIC_API_KEY=
# GEMINI_API_KEY=
# etc. (LiteLLM usually picks these up if PLUGIN_LLM_API_KEY is not passed to completion())


# Optional: Base URL for LLM API (e.g., Azure, Ollama, custom HF endpoint)
# PLUGIN_LLM_API_BASE="http://localhost:11434" # Example for local Ollama

# --- Optional LLM Parameters ---
# PLUGIN_TEMPERATURE="0.1"
# PLUGIN_MAX_TOKENS="500"
# PLUGIN_TOP_P="1.0"

# --- Optional Provider-Specific Configuration ---
# Required for Azure if PLUGIN_LLM_MODEL is an Azure model
# PLUGIN_AZURE_API_VERSION="2023-07-01-preview"

# Required for Vertex AI if not using ADC with implicit project/location
# PLUGIN_VERTEXAI_PROJECT="my-gcp-project-id"
# PLUGIN_VERTEXAI_LOCATION="us-central1"

# Optional for Bedrock if default AWS SDK config doesn't provide region
# PLUGIN_AWS_REGION_NAME="us-east-1"


# --- SCM Settings ---
# Required: SCM token (e.g., GitHub PAT). In CI, this comes from secrets.
PLUGIN_SCM_TOKEN="ghp_your_github_pat_here"

# Optional for self-hosted SCMs
# PLUGIN_SCM_API_URL="https://github.mycompany.com/api/v3"
# PLUGIN_SCM_PROVIDER="github" # If you implement multi-SCM support


# --- Plugin Behavior ---
# PLUGIN_EXCLUDE_PATTERNS="*.md,**/*.test.js,package-lock.json"
PLUGIN_LOG_LEVEL="DEBUG" # For local development, DEBUG is often useful


# --- CI Environment Simulation (for local testing) ---
# These mimic variables Drone CI would provide.
# You'll need to set these according to a test PR in a test repository.
DRONE_BUILD_EVENT="pull_request" # or "push" for a sync event
# DRONE_PULL_REQUEST_ACTION="opened" # Or "synchronize" - if Drone has such a var

DRONE_REPO_OWNER="your-username" # Will be parsed from DRONE_REPO_LINK if that's preferred path
DRONE_REPO_NAME="your-test-repo" # Will be parsed from DRONE_REPO_LINK
# DRONE_REPO="your-username/your-test-repo" # If DRONE_REPO_OWNER/NAME not used

DRONE_PULL_REQUEST="1" # Example PR number
DRONE_PULL_REQUEST_TITLE="Test PR for AI Reviewer" # Optional, will be fetched if not present
DRONE_PULL_REQUEST_BASE_SHA="main_branch_commit_sha_here" # SHA of the target branch tip for new PRs

DRONE_TARGET_BRANCH="main"
DRONE_SOURCE_BRANCH="feature/my-test-feature"

# For DRONE_BUILD_EVENT="pull_request" (opened PR):
# DRONE_COMMIT_SHA="feature_branch_head_commit_sha_here"
# DRONE_COMMIT="feature_branch_head_commit_sha_here"
# DRONE_COMMIT_AFTER="feature_branch_head_commit_sha_here"
# DRONE_COMMIT_BEFORE="target_branch_commit_sha_here_or_empty" # Check Drone docs for opened PRs

# For DRONE_BUILD_EVENT="push" (to PR branch, i.e., synchronize):
DRONE_COMMIT_SHA="new_feature_branch_head_commit_sha"
DRONE_COMMIT_BEFORE="old_feature_branch_head_commit_sha" # Crucial for sync diff
# DRONE_COMMIT_AFTER="new_feature_branch_head_commit_sha"

# This is what the plugin will try to get from `git remote get-url origin` or use as fallback
DRONE_REPO_LINK="https://github.com/your-username/your-test-repo.git" 

# Optional context vars
# DRONE_COMMIT_LINK="https://github.com/your-username/your-test-repo/pull/1"
# DRONE_COMMIT_MESSAGE="feat: Implement amazing new feature"
# DRONE_COMMIT_AUTHOR="Your Name"
# DRONE_COMMIT_AUTHOR_EMAIL="your.email@example.com"

# For local testing, ensure you are in a git repo checkout that matches DRONE_REPO_LINK
# Or set DRONE_WORKSPACE to the path of your local test git repository
# DRONE_WORKSPACE="/path/to/your/local/checkout/of/your-test-repo"